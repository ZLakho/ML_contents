import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import r2_score, mean_squared_error

dataset = pd.read_csv("students.csv")
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, 1].values


Q1 = np.percentile(y, 10)
Q3 = np.percentile(y, 40)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

outlier_indices = np.where((y < lower_bound) | (y > upper_bound))
X_cleaned = np.delete(X, outlier_indices, axis=0)
y_cleaned = np.delete(y, outlier_indices)


X_train, X_test, y_train, y_test = train_test_split(X_cleaned, y_cleaned, test_size=0.4, random_state=0)


model = DecisionTreeRegressor(random_state=60)
model.fit(X_train, y_train)


y_pred = model.predict(X_test)


rsquare = model.score(X_train, y_train)
print("R-squared on the training data:", rsquare)


plt.scatter(X_train, y_train, color="red")
X_train_sorted = np.sort(X_train, axis=0)
y_pred_sorted = model.predict(X_train_sorted)
plt.plot(X_train_sorted, y_pred_sorted, color="yellow")
plt.show()


rsquare_tree = r2_score(y_test, y_pred)
mse_tree = mean_squared_error(y_test, y_pred)

print("R-squared for Decision Tree Regression:", rsquare_tree)
print("Mean Squared Error for Decision Tree Regression:", mse_tree)
